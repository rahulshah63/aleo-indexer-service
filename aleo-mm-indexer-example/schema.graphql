
# --- Base Scalars ---
scalar BigInt
scalar DateTime
scalar JSON

# --- Generic Filter Input Types ---
input StringFilter {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _in: [String!]
  # Add other string-specific operators like _contains, _startsWith if needed
}

input IntFilter {
  _eq: Int
  _neq: Int
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _in: [Int!]
}

input BigIntFilter {
  _eq: BigInt
  _neq: BigInt
  _gt: BigInt
  _gte: BigInt
  _lt: BigInt
  _lte: BigInt
  _in: [BigInt!]
}

input DateTimeFilter {
  _eq: DateTime
  _neq: DateTime
  _gt: DateTime
  _gte: DateTime
  _lt: DateTime
  _lte: DateTime
  _in: [DateTime!]
}

input JSONFilter {
  _eq: JSON
  _neq: JSON
  # _in: [JSON!] # JSON 'in' might be complex depending on your Drizzle setup
  # You might want to omit or add very specific JSON filtering operators
}

input BooleanFilter {
  _eq: Boolean
  _neq: Boolean
}

# --- Query Type ---
type Query {
    transactions(
        limit: Int = 10,
        offset: Int = 0,
        programId: String,
        functionName: String,
        where: TransactionWhereInput, # <-- Added where argument
        orderBy: TransactionOrderBy = blockHeight,
        orderDirection: OrderDirection = desc
    ): [Transaction!]
    transaction(id: String!): Transaction
    market_reserves_historicals(
        limit: Int = 10,
        offset: Int = 0,
        where: Market_reserves_historicalsWhereInput, # <-- Added where argument
        orderDirection: OrderDirection = desc
    ): [Market_reserves_historicals!]
    market_reserves_historical(id: Int!): Market_reserves_historicals
    reserve_data(
        limit: Int = 10,
        offset: Int = 0,
        where: Reserve_dataWhereInput, # <-- Added where argument
        orderBy: Reserve_dataOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Reserve_data!]
    reserve_config(
        limit: Int = 10,
        offset: Int = 0,
        where: Reserve_configWhereInput, # <-- Added where argument
        orderBy: Reserve_configOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Reserve_config!]
    total_deposited_amount(
        limit: Int = 10,
        offset: Int = 0,
        where: Total_deposited_amountWhereInput, # <-- Added where argument
        orderBy: Total_deposited_amountOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Total_deposited_amount!]
    total_borrowed_amount(
        limit: Int = 10,
        offset: Int = 0,
        where: Total_borrowed_amountWhereInput, # <-- Added where argument
        orderBy: Total_borrowed_amountOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Total_borrowed_amount!]
    total_available_liquidity(
        limit: Int = 10,
        offset: Int = 0,
        where: Total_available_liquidityWhereInput, # <-- Added where argument
        orderBy: Total_available_liquidityOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Total_available_liquidity!]
    deposited_amount(
        limit: Int = 10,
        offset: Int = 0,
        where: Deposited_amountWhereInput, # <-- Added where argument
        orderBy: Deposited_amountOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Deposited_amount!]
    borrowed_amount(
        limit: Int = 10,
        offset: Int = 0,
        where: Borrowed_amountWhereInput, # <-- Added where argument
        orderBy: Borrowed_amountOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Borrowed_amount!]
    user_cumulative_index(
        limit: Int = 10,
        offset: Int = 0,
        where: User_cumulative_indexWhereInput, # <-- Added where argument
        orderBy: User_cumulative_indexOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [User_cumulative_index!]
    usersdata(
        limit: Int = 10,
        offset: Int = 0,
        where: UsersdataWhereInput, # <-- Added where argument
        orderBy: UsersdataOrderBy = lastUpdatedBlock,
        orderDirection: OrderDirection = desc
    ): [Usersdata!]
    deposits_historicals(
        limit: Int = 10,
        offset: Int = 0,
        where: Deposits_historicalsWhereInput, # <-- Added where argument
        orderDirection: OrderDirection = desc
    ): [Deposits_historicals!]
    deposits_historical(id: Int!): Deposits_historicals
    borrows_historicals(
        limit: Int = 10,
        offset: Int = 0,
        where: Borrows_historicalsWhereInput, # <-- Added where argument
        orderDirection: OrderDirection = desc
    ): [Borrows_historicals!]
    borrows_historical(id: Int!): Borrows_historicals
    withdraws_historicals(
        limit: Int = 10,
        offset: Int = 0,
        where: Withdraws_historicalsWhereInput, # <-- Added where argument
        orderDirection: OrderDirection = desc
    ): [Withdraws_historicals!]
    withdraws_historical(id: Int!): Withdraws_historicals
    repays_historicals(
        limit: Int = 10,
        offset: Int = 0,
        where: Repays_historicalsWhereInput, # <-- Added where argument
        orderDirection: OrderDirection = desc
    ): [Repays_historicals!]
    repays_historical(id: Int!): Repays_historicals
}


# --- Base Schemas ---

type IndexerState {
    programName: String!
    functionName: String!
    lastIndexedBlock: Int!
    lastUpdated: DateTime!
}

type Transaction {
    id: String!
    programId: String!
    functionName: String!
    blockHeight: Int!
    timestamp: DateTime!
    raw: JSON
}

enum OrderDirection {
  asc
  desc
}

enum TransactionOrderBy {
  blockHeight
  timestamp
  programId
  functionName
}
enum Reserve_dataOrderBy {
  lastUpdatedBlock
  key
}

enum Reserve_configOrderBy {
  lastUpdatedBlock
  key
}

enum Total_deposited_amountOrderBy {
  lastUpdatedBlock
  key
}

enum Total_borrowed_amountOrderBy {
  lastUpdatedBlock
  key
}

enum Total_available_liquidityOrderBy {
  lastUpdatedBlock
  key
}

enum Deposited_amountOrderBy {
  lastUpdatedBlock
  key
}

enum Borrowed_amountOrderBy {
  lastUpdatedBlock
  key
}

enum User_cumulative_indexOrderBy {
  lastUpdatedBlock
  key
}

enum UsersdataOrderBy {
  lastUpdatedBlock
  key
}

input TransactionWhereInput {
  id: StringFilter
  blockHeight: IntFilter
  timestamp: DateTimeFilter
  programId: StringFilter
  functionName: StringFilter
}

input Market_reserves_historicalsWhereInput {
  id: IntFilter
  token_id_cipher: StringFilter
  liquidity_cumulative_index_cipher: StringFilter
  borrow_cumulative_index_cipher: StringFilter
  base_LTV_as_collateral_cipher: StringFilter
  liquidation_threshold_cipher: StringFilter
  liquidation_bonus_cipher: StringFilter
  decimals_cipher: StringFilter
  optimal_utilization_rate_cipher: StringFilter
  base_borrow_rate_cipher: StringFilter
  is_freezed_cipher: StringFilter
  is_active_cipher: StringFilter
  borrow_threshold_cipher: StringFilter
  user_address: StringFilter
  last_update_block_height: IntFilter
  liquidity_rate: BigIntFilter
  borrow_rate: BigIntFilter
  liquidity_cumulative_index: BigIntFilter
  borrow_cumulative_index: BigIntFilter
  token_id: StringFilter
  decimals: IntFilter
  base_LTV_as_collateral: BigIntFilter
  liquidation_threshold: BigIntFilter
  liquidation_bonus: BigIntFilter
  optimal_utilization_rate: BigIntFilter
  base_borrow_rate: BigIntFilter
  borrow_threshold: BigIntFilter
  is_freezed: BooleanFilter
  is_active: BooleanFilter
}

input Reserve_dataWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Reserve_configWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Total_deposited_amountWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Total_borrowed_amountWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Total_available_liquidityWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Deposited_amountWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Borrowed_amountWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input User_cumulative_indexWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input UsersdataWhereInput {
  key: StringFilter
  lastUpdatedBlock: IntFilter
}

input Deposits_historicalsWhereInput {
  id: IntFilter
  token_id: StringFilter
  amount: BigIntFilter
  user_hash: StringFilter
}

input Borrows_historicalsWhereInput {
  id: IntFilter
  token_id: StringFilter
  user_hash: StringFilter
  user_key: StringFilter
  borrow_amount: BigIntFilter
  repay_amount: BigIntFilter
}

input Withdraws_historicalsWhereInput {
  id: IntFilter
  token_id: StringFilter
  user_hash: StringFilter
  user_key: StringFilter
  withdraw_amount: BigIntFilter
}

input Repays_historicalsWhereInput {
  id: IntFilter
  token_id: StringFilter
  user_hash: StringFilter
  repay_amount: BigIntFilter
}

# --- Auto-Generated Schemas from indexer.config.ts ---

type ReserveData {
  last_update_block_height: Int
  liquidity_rate: BigInt
  borrow_rate: BigInt
  liquidity_cumulative_index: BigInt
  borrow_cumulative_index: BigInt
}

type ReserveConfig {
  token_id: String
  decimals: Int
  base_LTV_as_collateral: BigInt
  liquidation_threshold: BigInt
  liquidation_bonus: BigInt
  optimal_utilization_rate: BigInt
  base_borrow_rate: BigInt
  borrow_threshold: BigInt
  is_freezed: Boolean
  is_active: Boolean
}

type UserData {
  last_updated_block_height: Int
  total_liquidity_balance_USD: BigInt
  total_collateral_balance_USD: BigInt
  total_borrow_balance_USD: BigInt
  total_fees_USD: BigInt
  avaialble_borrow_USD: BigInt
  current_LTV: BigInt
  current_liquidation_threshold: BigInt
  borrowing_power: BigInt
  health_factor_below_threshold: Boolean
  collateral_needed_in_USD: BigInt
  hf_withdraw_below_threshold: Boolean
}

type Market_reserves_historicals {
  id: Int!
  transaction: Transaction!
  token_id_cipher: String
  liquidity_cumulative_index_cipher: String
  borrow_cumulative_index_cipher: String
  base_LTV_as_collateral_cipher: String
  liquidation_threshold_cipher: String
  liquidation_bonus_cipher: String
  decimals_cipher: String
  optimal_utilization_rate_cipher: String
  base_borrow_rate_cipher: String
  is_freezed_cipher: String
  is_active_cipher: String
  borrow_threshold_cipher: String
  user_address: String
  last_update_block_height: Int
  liquidity_rate: BigInt
  borrow_rate: BigInt
  liquidity_cumulative_index: BigInt
  borrow_cumulative_index: BigInt
  token_id: String
  decimals: Int
  base_LTV_as_collateral: BigInt
  liquidation_threshold: BigInt
  liquidation_bonus: BigInt
  optimal_utilization_rate: BigInt
  base_borrow_rate: BigInt
  borrow_threshold: BigInt
  is_freezed: Boolean
  is_active: Boolean
}

type Deposits_historicals {
  id: Int!
  transaction: Transaction!
  token_id: String
  amount: BigInt
  user_hash: String
}

type Borrows_historicals {
  id: Int!
  transaction: Transaction!
  token_id: String
  user_hash: String
  user_key: String
  borrow_amount: BigInt
  repay_amount: BigInt
}

type Withdraws_historicals {
  id: Int!
  transaction: Transaction!
  token_id: String
  user_hash: String
  user_key: String
  withdraw_amount: BigInt
}

type Repays_historicals {
  id: Int!
  transaction: Transaction!
  token_id: String
  user_hash: String
  repay_amount: BigInt
}

type Reserve_data {
  key: String!
  value: ReserveData!
  lastUpdatedBlock: Int!
}

type Reserve_config {
  key: String!
  value: ReserveConfig!
  lastUpdatedBlock: Int!
}

type Total_deposited_amount {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type Total_borrowed_amount {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type Total_available_liquidity {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type Deposited_amount {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type Borrowed_amount {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type User_cumulative_index {
  key: String!
  value: BigInt!
  lastUpdatedBlock: Int!
}

type Usersdata {
  key: String!
  value: UserData!
  lastUpdatedBlock: Int!
}

